(ns project-euler.core
  (:gen-class)
  (:require [clojure.math.numeric-tower :as math]))


;; If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6
;; and 9. The sum of these multiples is 23.
;; Find the sum of all the multiples of 3 or 5 below 1000.
(defn p1 [x]
  (= (mod x 3) 0))
(defn p2 [x]
  (= (mod x 5) 0))

(defn p12 [x]
  (or (p1 x)
      (p2 x)))

(apply + (filter p12 (range 1000)))


(comment "
Question: Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms."
)

(defn fibonacci [sum first second]
  (if (>= sum 4000000)
    sum
    (do
      (if (even? second)
        (recur (+ sum second) second (+ first second))
        (recur sum second (+ first second))))))

(comment "
Question: The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?")

(defn prime-loop [p q]
  "Loop until i less than q"
    (if (= 0 (mod q p))
      false
      (do (if (= p (dec q))
            true
            (recur (inc p) q)))))

(defn prime? [x]
  (prime-loop 2 x)
  )

(defn largest-prime [counter arg]
  (if (= 0 (mod arg counter))
    (if (prime? counter) (def retVal counter) ))
 ;; (println retVal)
  (if (>= counter (math/sqrt arg))
    retVal
    (do
      (recur (inc counter) arg))))

(comment "
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.

Find the largest palindrome made from the product of two 3-digit numbers.")
(defn palindrome? [counter x]
  (if (> counter (/ (count (str x)) 2))
    true
    (if (= (nth (str x) counter) (nth (str x) (- (count (str x)) (+ counter 1))))
    (recur (inc counter) x)
    false)))
